[
  {
    "Instruction": "AAA",
    "meaning": "ASCII adjust AL after addition",
    "notes": "used with unpacked binary-coded decimal",
    "opcode": "0x37"
  },
  {
    "Instruction": "AAD",
    "Meaning": "ASCII adjust AX before division",
    "Notes": "8086/8088 datasheet documents only base 10 version of the AAD instruction (opcode 0xD5 0x0A), but any other base will work. Later Intel's documentation has the generic form too. NEC V20 and V30 (and possibly other NEC V-series CPUs) always use base 10, and ignore the argument, causing a number of incompatibilities",
    "Opcode": "0xD5"
  },
  {
    "Instruction": "AAM",
    "Meaning": "ASCII adjust AX after multiplication",
    "Notes": "Only base 10 version (Operand is 0xA) is documented, see notes for AAD",
    "Opcode": "0xD4"
  },
  {
    "Instruction": "AAS",
    "Meaning": "ASCII adjust AL after subtraction",
    "Notes": "",
    "Opcode": "0x3F"
  },
  {
    "Instruction": "ADC",
    "Meaning": "Add with carry",
    "Notes": "destination = destination + source + carry_flag",
    "Opcode": "0x10...0x15, 0x80...0x81/2, 0x82...0x83/2 (since 80186)"
  },
  {
    "Instruction": "ADD",
    "Meaning": "Add",
    "Notes": "(1) r/m += r/imm; (2) r += m/imm;",
    "Opcode": "0x00...0x05, 0x80/0...0x81/0, 0x82/0...0x83/0 (since 80186)"
  },
  {
    "Instruction": "AND",
    "Meaning": "Logical AND",
    "Notes": "(1) r/m &= r/imm; (2) r &= m/imm;",
    "Opcode": "0x20...0x25, 0x80...0x81/4, 0x82...0x83/4 (since 80186)"
  },
  {
    "Instruction": "CALL",
    "Meaning": "Call procedure",
    "Notes": "push eip; eip points to the instruction directly after the call",
    "Opcode": "0x9A, 0xE8, 0xFF/2, 0xFF/3",
    "jumpable": true
  },
  {
    "Instruction": "CBW",
    "Meaning": "Convert byte to word",
    "Notes": "",
    "Opcode": "0x98"
  },
  {
    "Instruction": "CLC",
    "Meaning": "Clear carry flag",
    "Notes": "CF = 0;",
    "Opcode": "0xF8"
  },
  {
    "Instruction": "CLD",
    "Meaning": "Clear direction flag",
    "Notes": "DF = 0;",
    "Opcode": "0xFC"
  },
  {
    "Instruction": "CLI",
    "Meaning": "Clear interrupt flag",
    "Notes": "IF = 0;",
    "Opcode": "0xFA"
  },
  {
    "Instruction": "CMC",
    "Meaning": "Complement carry flag",
    "Notes": "",
    "Opcode": "0xF5"
  },
  {
    "Instruction": "CMP",
    "Meaning": "Compare operands",
    "Notes": "",
    "Opcode": "0x38...0x3D, 0x80...0x81/7, 0x82...0x83/7 (since 80186)"
  },
  {
    "Instruction": "CMPSB",
    "Meaning": "Compare bytes in memory. May be used with a REP prefix to repeat the instruction CX times.",
    "Notes": "",
    "Opcode": "0xA6"
  },
  {
    "Instruction": "CMPSW",
    "Meaning": "Compare words. May be used with a REP prefix to repeat the instruction CX times.",
    "Notes": "",
    "Opcode": "0xA7"
  },
  {
    "Instruction": "CWD",
    "Meaning": "Convert word to doubleword",
    "Notes": "",
    "Opcode": "0x99"
  },
  {
    "Instruction": "DAA",
    "Meaning": "Decimal adjust AL after addition",
    "Notes": "(used with packed binary-coded decimal)",
    "Opcode": "0x27"
  },
  {
    "Instruction": "DAS",
    "Meaning": "Decimal adjust AL after subtraction",
    "Notes": "",
    "Opcode": "0x2F"
  },
  {
    "Instruction": "DEC",
    "Meaning": "Decrement by 1",
    "Notes": "",
    "Opcode": "0x48...0x4F, 0xFE/1, 0xFF/1"
  },
  {
    "Instruction": "DIV",
    "Meaning": "Unsigned divide",
    "Notes": "(1) AX = DX:AX / r/m; resulting DX = remainder (2) AL = AX / r/m; resulting AH = remainder",
    "Opcode": "0xF7/6, 0xF6/6"
  },
  {
    "Instruction": "ESC",
    "Meaning": "Used with floating-point unit",
    "Notes": "",
    "Opcode": "0xD8..0xDF"
  },
  {
    "Instruction": "HLT",
    "Meaning": "Enter halt state",
    "Notes": "",
    "Opcode": "0xF4"
  },
  {
    "Instruction": "IDIV",
    "Meaning": "Signed divide",
    "Notes": "(1) AX = DX:AX / r/m; resulting DX = remainder (2) AL = AX / r/m; resulting AH = remainder",
    "Opcode": "0xF7/7, 0xF6/7"
  },
  {
    "Instruction": "IMUL",
    "Meaning": "Signed multiply in One-operand form",
    "Notes": "(1) DX:AX = AX * r/m; (2) AX = AL * r/m",
    "Opcode": "0x69, 0x6B (both since 80186), 0xF7/5, 0xF6/5, 0x0FAF (since 80386)"
  },
  {
    "Instruction": "IN",
    "Meaning": "Input from port",
    "Notes": "(1) AL = port[imm]; (2) AL = port[DX]; (3) AX = port[imm]; (4) AX = port[DX];",
    "Opcode": "0xE4, 0xE5, 0xEC, 0xED"
  },
  {
    "Instruction": "INC",
    "Meaning": "Increment by 1",
    "Notes": "",
    "Opcode": "0x40...0x47, 0xFE/0, 0xFF/0"
  },
  {
    "Instruction": "INT",
    "Meaning": "Call to interrupt",
    "Notes": "",
    "Opcode": "0xCC, 0xCD"
  },
  {
    "Instruction": "INTO",
    "Meaning": "Call to interrupt if overflow",
    "Notes": "",
    "Opcode": "0xCE"
  },
  {
    "Instruction": "IRET",
    "Meaning": "Return from interrupt",
    "Notes": "",
    "Opcode": "0xCF",
    "jumpable": true
  },
  {
    "Instruction": "J..?",
    "Meaning": "Jump if condition",
    "Opcode": "0x70...0x7F, 0x0F80...0x0F8F (since 80386)",
    "synonyms": [
      "JA",
      "JAE",
      "JB",
      "JBE",
      "JC",
      "JE",
      "JG",
      "JGE",
      "JL",
      "JLE",
      "JNA",
      "JNAE",
      "JNB",
      "JNBE",
      "JNC",
      "JNE",
      "JNG",
      "JNGE",
      "JNL",
      "JNLE",
      "JNO",
      "JNP",
      "JNS",
      "JNZ",
      "JO",
      "JP",
      "JPE",
      "JPO",
      "JS",
      "JZ"
    ],
    "jumpable": true
  },
  {
    "Instruction": "JCXZ",
    "Meaning": "Jump if CX is zero",
    "Notes": "",
    "Opcode": "0xE3",
    "jumpable": true
  },
  {
    "Instruction": "JMP",
    "Meaning": "Jump",
    "Notes": "",
    "Opcode": "0xE9...0xEB, 0xFF/4, 0xFF/5",
    "jumpable": true
  },
  {
    "Instruction": "LAHF",
    "Meaning": "Load FLAGS into AH register",
    "Notes": "",
    "Opcode": "0x9F"
  },
  {
    "Instruction": "LDS",
    "Meaning": "Load DS:r with far pointer",
    "Notes": "",
    "Opcode": "0xC5"
  },
  {
    "Instruction": "LEA",
    "Meaning": "Load Effective Address",
    "Notes": "",
    "Opcode": "0x8D"
  },
  {
    "Instruction": "LES",
    "Meaning": "Load ES:r with far pointer",
    "Notes": "",
    "Opcode": "0xC4"
  },
  {
    "Instruction": "LOCK",
    "Meaning": "Assert BUS LOCK# signal",
    "Notes": "(for multiprocessing)",
    "Opcode": "0xF0"
  },
  {
    "Instruction": "LODSB",
    "Meaning": "Load string byte. May be used with a REP prefix to repeat the instruction CX times.",
    "Notes": "if (DF==0) AL = *SI++; else AL = *SI--;",
    "Opcode": "0xAC"
  },
  {
    "Instruction": "LODSW",
    "Meaning": "Load string word. May be used with a REP prefix to repeat the instruction CX times.",
    "Notes": "if (DF==0) AX = *SI++; else AX = *SI--;",
    "Opcode": "0xAD"
  },
  {
    "Instruction": "LOOP/LOOPx",
    "Meaning": "Loop control",
    "Notes": "(LOOPE, LOOPNE, LOOPNZ, LOOPZ) if (x && --CX) goto lbl;",
    "Opcode": "0xE0...0xE2"
  },
  {
    "Instruction": "MOV",
    "Meaning": "Move",
    "Notes": "copies data from one location to another, (1) r/m = r; (2) r = r/m;",
    "Opcode": "0xA0...0xA3"
  },
  {
    "Instruction": "MOVSB",
    "Meaning": "Move byte from string to string. May be used with a REP prefix to repeat the instruction CX times.",
    "Notes": "if (DF==0) \n  *(byte*)DI++ = *(byte*)SI++; \nelse \n  *(byte*)DI-- = *(byte*)SI--;\n.",
    "Opcode": "0xA4"
  },
  {
    "Instruction": "MOVSW",
    "Meaning": "Move word from string to string. May be used with a REP prefix to repeat the instruction CX times.",
    "Notes": "if (DF==0) \n  *(word*)DI++ = *(word*)SI++; \nelse \n  *(word*)DI-- = *(word*)SI--;",
    "Opcode": "0xA5"
  },
  {
    "Instruction": "MUL",
    "Meaning": "Unsigned multiply",
    "Notes": "(1) DX:AX = AX * r/m; (2) AX = AL * r/m;",
    "Opcode": "0xF7/4, 0xF6/4"
  },
  {
    "Instruction": "NEG",
    "Meaning": "Two's complement negation",
    "Notes": "r/m *= -1;",
    "Opcode": "0xF6/3...0xF7/3"
  },
  {
    "Instruction": "NOP",
    "Meaning": "No operation",
    "Notes": "opcode equivalent to XCHG EAX, EAX",
    "Opcode": "0x90"
  },
  {
    "Instruction": "NOT",
    "Meaning": "Negate the operand, logical NOT",
    "Notes": "r/m ^= -1;",
    "Opcode": "0xF6/2...0xF7/2"
  },
  {
    "Instruction": "OR",
    "Meaning": "Logical OR",
    "Notes": "(1) r/m (2) r",
    "Opcode": "0x08...0x0D, 0x80...0x81/1, 0x82...0x83/1 (since 80186)"
  },
  {
    "Instruction": "OUT",
    "Meaning": "Output to port",
    "Notes": "(1) port[imm] = AL; (2) port[DX] = AL; (3) port[imm] = AX; (4) port[DX] = AX;",
    "Opcode": "0xE6, 0xE7, 0xEE, 0xEF"
  },
  {
    "Instruction": "POP",
    "Meaning": "Pop data from stack",
    "Notes": "r/m = *SP++; POP CS (opcode 0x0F) works only on 8086/8088. Later CPUs use 0x0F as a prefix for newer instructions.",
    "Opcode": "0x07, 0x0F(8086/8088 only), 0x17, 0x1F, 0x58...0x5F, 0x8F/0"
  },
  {
    "Instruction": "POPF",
    "Meaning": "Pop FLAGS register from stack",
    "Notes": "FLAGS = *SP++;",
    "Opcode": "0x9D"
  },
  {
    "Instruction": "PUSH",
    "Meaning": "Push data onto stack",
    "Notes": "*--SP = r/m;",
    "Opcode": "0x06, 0x0E, 0x16, 0x1E, 0x50...0x57, 0x68, 0x6A (both since 80186), 0xFF/6"
  },
  {
    "Instruction": "PUSHF",
    "Meaning": "Push FLAGS onto stack",
    "Notes": "*--SP = FLAGS;",
    "Opcode": "0x9C"
  },
  {
    "Instruction": "RCL",
    "Meaning": "Rotate left (with carry)",
    "Notes": "",
    "Opcode": "0xC0...0xC1/2 (since 80186), 0xD0...0xD3/2"
  },
  {
    "Instruction": "RCR",
    "Meaning": "Rotate right (with carry)",
    "Notes": "",
    "Opcode": "0xC0...0xC1/3 (since 80186), 0xD0...0xD3/3"
  },
  {
    "Instruction": "REPxx",
    "Meaning": "Repeat MOVS/STOS/CMPS/LODS/SCAS",
    "Notes": "(REP, REPE, REPNE, REPNZ, REPZ)",
    "Opcode": "0xF2, 0xF3"
  },
  {
    "Instruction": "RET",
    "Meaning": "Return from procedure",
    "Notes": "Not a real instruction. The assembler will translate these to a RETN or a RETF depending on the memory model of the target system.",
    "Opcode": "",
    "jumpable": true
  },
  {
    "Instruction": "RETN",
    "Meaning": "Return from near procedure",
    "Notes": "",
    "Opcode": "0xC2, 0xC3",
    "jumpable": true
  },
  {
    "Instruction": "RETF",
    "Meaning": "Return from far procedure",
    "Notes": "",
    "Opcode": "0xCA, 0xCB",
    "jumpable": true
  },
  {
    "Instruction": "ROL",
    "Meaning": "Rotate left",
    "Notes": "",
    "Opcode": "0xC0...0xC1/0 (since 80186), 0xD0...0xD3/0"
  },
  {
    "Instruction": "ROR",
    "Meaning": "Rotate right",
    "Notes": "",
    "Opcode": "0xC0...0xC1/1 (since 80186), 0xD0...0xD3/1"
  },
  {
    "Instruction": "SAHF",
    "Meaning": "Store AH into FLAGS",
    "Notes": "",
    "Opcode": "0x9E"
  },
  {
    "Instruction": "SAL",
    "Meaning": "Shift Arithmetically left (signed shift left)",
    "Notes": "(1) r/m <<= 1; (2) r/m <<= CL;",
    "Opcode": "0xC0...0xC1/4 (since 80186), 0xD0...0xD3/4"
  },
  {
    "Instruction": "SAR",
    "Meaning": "Shift Arithmetically right (signed shift right)",
    "Notes": "(1) (signed) r/m >>= 1; (2) (signed) r/m >>= CL;",
    "Opcode": "0xC0...0xC1/7 (since 80186), 0xD0...0xD3/7"
  },
  {
    "Instruction": "SBB",
    "Meaning": "Subtraction with borrow",
    "Notes": "alternative 1-byte encoding of SBB AL, AL is available via undocumented SALC instruction",
    "Opcode": "0x18...0x1D, 0x80...0x81/3, 0x82...0x83/3 (since 80186)"
  },
  {
    "Instruction": "SCASB",
    "Meaning": "Compare byte string. May be used with a REP prefix to repeat the instruction CX times.",
    "Notes": "",
    "Opcode": "0xAE"
  },
  {
    "Instruction": "SCASW",
    "Meaning": "Compare word string. May be used with a REP prefix to repeat the instruction CX times.",
    "Notes": "",
    "Opcode": "0xAF"
  },
  {
    "Instruction": "SHL",
    "Meaning": "Shift left (unsigned shift left)",
    "Notes": "",
    "Opcode": "0xC0...0xC1/4 (since 80186), 0xD0...0xD3/4"
  },
  {
    "Instruction": "SHR",
    "Meaning": "Shift right (unsigned shift right)",
    "Notes": "",
    "Opcode": "0xC0...0xC1/5 (since 80186), 0xD0...0xD3/5"
  },
  {
    "Instruction": "STC",
    "Meaning": "Set carry flag",
    "Notes": "CF = 1;",
    "Opcode": "0xF9"
  },
  {
    "Instruction": "STD",
    "Meaning": "Set direction flag",
    "Notes": "DF = 1;",
    "Opcode": "0xFD"
  },
  {
    "Instruction": "STI",
    "Meaning": "Set interrupt flag",
    "Notes": "IF = 1;",
    "Opcode": "0xFB"
  },
  {
    "Instruction": "STOSB",
    "Meaning": "Store byte in string. May be used with a REP prefix to repeat the instruction CX times.",
    "Notes": "if (DF==0) *ES:DI++ = AL; else *ES:DI-- = AL;",
    "Opcode": "0xAA"
  },
  {
    "Instruction": "STOSW",
    "Meaning": "Store word in string. May be used with a REP prefix to repeat the instruction CX times.",
    "Notes": "if (DF==0) *ES:DI++ = AX; else *ES:DI-- = AX;",
    "Opcode": "0xAB"
  },
  {
    "Instruction": "SUB",
    "Meaning": "Subtraction",
    "Notes": "(1) r/m -= r/imm; (2) r -= m/imm;",
    "Opcode": "0x28...0x2D, 0x80...0x81/5, 0x82...0x83/5 (since 80186)"
  },
  {
    "Instruction": "TEST",
    "Meaning": "Logical compare (AND)",
    "Notes": "(1) r/m & r/imm; (2) r & m/imm;",
    "Opcode": "0x84, 0x85, 0xA8, 0xA9, 0xF6/0, 0xF7/0"
  },
  {
    "Instruction": "WAIT",
    "Meaning": "Wait until not busy",
    "Notes": "Waits until BUSY# pin is inactive (used with floating-point unit)",
    "Opcode": "0x9B"
  },
  {
    "Instruction": "XCHG",
    "Meaning": "Exchange data",
    "Notes": "r :=: r/m; A spinlock typically uses xchg as an atomic operation. (coma bug).",
    "Opcode": "0x86, 0x87, 0x91...0x97"
  },
  {
    "Instruction": "XLAT",
    "Meaning": "Table look-up translation",
    "Notes": "behaves like MOV AL, [BX+AL]",
    "Opcode": "0xD7"
  },
  {
    "Instruction": "XOR",
    "Meaning": "Exclusive OR",
    "Notes": "(1) r/m ^= r/imm; (2) r ^= m/imm;",
    "Opcode": "0x30...0x35, 0x80...0x81/6, 0x82...0x83/6 (since 80186)"
  },

  {
    "Instruction": "BOUND",
    "Meaning": "Check array index against bounds",
    "Notes": "raises software interrupt 5 if test fails",
    "Opcode": "62 /r"
  },
  {
    "Instruction": "ENTER",
    "Meaning": "Enter stack frame",
    "Notes": "Modifies stack for entry to procedure for high level language. Takes two operands: the amount of storage to be allocated on the stack and the nesting level of the procedure.",
    "Opcode": "C8 iw ib"
  },
  {
    "Instruction": "INSB/INSW",
    "Meaning": "Input from port to string",
    "Notes": "equivalent to:\nIN AX, DX\nMOV ES:[DI], AX\n; adjust DI according to operand size and DF",
    "Opcode": "6C"
  },
  {
    "Instruction": "INSB/INSW",
    "Meaning": "Input from port to string",
    "Notes": "equivalent to:\nIN AX, DX\nMOV ES:[DI], AX\n; adjust DI according to operand size and DF",
    "Opcode": "6D"
  },
  {
    "Instruction": "LEAVE",
    "Meaning": "Leave stack frame",
    "Notes": "Releases the local stack storage created by the previous ENTER instruction.",
    "Opcode": "C9",
    "jumpable": true
  },
  {
    "Instruction": "OUTSB/OUTSW",
    "Meaning": "Output string to port",
    "Notes": "equivalent to:\nMOV AX, DS:[SI]\nOUT DX, AX\n; adjust SI according to operand size and DF",
    "Opcode": "6E"
  },
  {
    "Instruction": "OUTSB/OUTSW",
    "Meaning": "Output string to port",
    "Notes": "equivalent to:\nMOV AX, DS:[SI]\nOUT DX, AX\n; adjust SI according to operand size and DF",
    "Opcode": "6F"
  },
  {
    "Instruction": "POPA",
    "Meaning": "Pop all general purpose registers from stack",
    "Notes": "equivalent to:\nPOP DI\nPOP SI\nPOP BP\nPOP AX ; no POP SP here, all it does is ADD SP, 2 (since AX will be overwritten later)\nPOP BX\nPOP DX\nPOP CX\nPOP AX",
    "Opcode": "61"
  },
  {
    "Instruction": "PUSHA",
    "Meaning": "Push all general purpose registers onto stack",
    "Notes": "equivalent to:\nPUSH AX\nPUSH CX\nPUSH DX\nPUSH BX\nPUSH SP ; The value stored is the initial SP value\nPUSH BP\nPUSH SI\nPUSH DI",
    "Opcode": "60"
  },
  {
    "Instruction": "PUSH immediate",
    "Meaning": "Push an immediate byte/word value onto the stack",
    "Notes": "example:\nPUSH 12h\nPUSH 1200h",
    "Opcode": "6A ib"
  },
  {
    "Instruction": "PUSH immediate",
    "Meaning": "Push an immediate byte/word value onto the stack",
    "Notes": "example:\nPUSH 12h\nPUSH 1200h",
    "Opcode": "68 iw"
  },
  {
    "Instruction": "IMUL immediate",
    "Meaning": "Signed and unsigned multiplication of immediate byte/word value",
    "Notes": "example:\nIMUL BX,12h\nIMUL DX,1200h\nIMUL CX, DX, 12h\nIMUL BX, SI, 1200h\nIMUL DI, word ptr [BX+SI], 12h\nIMUL SI, word ptr [BP-4], 1200h\n\nNote that since the lower half is the same for unsigned and signed multiplication, this version of the instruction can be used for unsigned multiplication as well.",
    "Opcode": "6B /r ib"
  },
  {
    "Instruction": "IMUL immediate",
    "Meaning": "Signed and unsigned multiplication of immediate byte/word value",
    "Notes": "example:\nIMUL BX,12h\nIMUL DX,1200h\nIMUL CX, DX, 12h\nIMUL BX, SI, 1200h\nIMUL DI, word ptr [BX+SI], 12h\nIMUL SI, word ptr [BP-4], 1200h\n\nNote that since the lower half is the same for unsigned and signed multiplication, this version of the instruction can be used for unsigned multiplication as well.",
    "Opcode": "69 /r iw"
  },
  {
    "Instruction": "SHL/SHR/SAL/SAR/ROL/ROR/RCL/RCR immediate",
    "Meaning": "Rotate/shift bits with an immediate value greater than 1",
    "Notes": "example:\nROL AX,3\nSHR BL,3",
    "Opcode": "C0"
  },
  {
    "Instruction": "SHL/SHR/SAL/SAR/ROL/ROR/RCL/RCR immediate",
    "Meaning": "Rotate/shift bits with an immediate value greater than 1",
    "Notes": "example:\nROL AX,3\nSHR BL,3",
    "Opcode": "C1"
  },
  {
    "Instruction": "ENDBR32",
    "Meaning": "Terminate indirect branch in 32-bit mode",
    "Opcode": "F3 0F 1E FB"
  },
  {
    "Instruction": "ENDBR64",
    "Meaning": "Terminate indirect branch in 64-bit mode",
    "Opcode": "F3 0F 1E FA"
  },
  {
    "Instruction": "REPNZ",
    "Meaning": "Repeat MOVS/STOS/CMPS/LODS/SCAS",
    "Opcode": "0xF2, 0xF3",
    "jumpable": true
  },
  {
    "Instruction": "JZ",
    "Meaning": "Jump if Zero",
    "Opcode": "0x70...0x7F, 0x0F80...0x0F8F",
    "jumpable": true
  },
  {
    "Instruction": "JNLE",
    "Meaning": "Jump if Not Less or Equal",
    "Opcode": "0x70...0x7F, 0x0F80...0x0F8F",
    "jumpable": true
  },
  {
    "Instruction": "JLE",
    "Meaning": "Jump if Less or Equal",
    "Opcode": "0x70...0x7F, 0x0F80...0x0F8F",
    "jumpable": true
  },
  {
    "Instruction": "JNZ",
    "Meaning": "Jump if Not Zero",
    "Opcode": "0x70...0x7F, 0x0F80...0x0F8F",
    "jumpable": true
  },
  {
    "Instruction": "MOVDQA",
    "Meaning": "Move Aligned Double Quadword",
    "Opcode": "66 0F 6F /r"
  },
  {
    "Instruction": "MOVAPS",
    "Meaning": "Move Aligned Packed Single-Precision Floating-Point Values",
    "Opcode": "0F 28 /r"
  }
]
